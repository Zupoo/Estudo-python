importar         import panda as pd
armazenar um arquivo csv        vendas_df = pd.read_csv(r'nome do arquivo se estiver tudo na mesma pasta que o prompt', sep = ';')
printar ele                     print(vendas_df)
pegar s√≥ alguma coluna            clientes = vendas_df['ID Clientes']
mudar nome                         vendas_df = vendas_df.rename(columns={'NOME COMO ESTA': 'COMO VAI FICAR'})
mostrar s√≥ algumas linhas 0: -1:
fazer merge                 pega tudo que tem em uma tabela sobre aquela coisa e joga na outra


counts() conta quantas vezes aparece AQUELE VALOR na coluna .value_counts()
.ploy() criar grafico
groupby()junta e soma tudo q se repete

filtrar data frame original , pegar s√≥ de alguma loja pelo id ou algo assim s√≥ colocar dentro do [] oq vc quer igual ao if ex: loja_306 =  vendas_df[vendas_df['ID Loja'] == 306]
.cloumns pra ve todas as colunas tem no data frame
.info
.set_index()  muda o index da tabela


.loc encontrar alguma coisa 



üì¶ Importa√ß√£o de dados
Comando	O que faz
pd.read_csv("arquivo.csv")	L√™ um arquivo CSV e cria um DataFrame
pd.read_excel("arquivo.xlsx")	L√™ um arquivo do Excel
df.to_csv("saida.csv")	Salva o DataFrame como CSV
df.to_excel("saida.xlsx")	Salva o DataFrame como Excel

üß± Estrutura e visualiza√ß√£o b√°sica
M√©todo	O que faz
df.head()	Mostra as 5 primeiras linhas
df.tail()	Mostra as 5 √∫ltimas linhas
df.shape	Mostra o n√∫mero de linhas e colunas (ex: (100, 5))
df.columns	Mostra os nomes das colunas
df.info()	Informa√ß√µes b√°sicas: tipos, colunas, valores nulos
df.describe()	Estat√≠sticas b√°sicas (m√©dia, desvio, min, max, etc)

üîç Acessar dados
M√©todo	O que faz
df['coluna']	Acessa uma coluna
df[['col1', 'col2']]	Acessa v√°rias colunas
df.loc[linha]	Acessa por √≠ndice/label da linha
df.iloc[linha]	Acessa por posi√ß√£o num√©rica da linha

üîß Manipula√ß√£o de dados
M√©todo	O que faz
df.rename(columns={'velho': 'novo'})	Renomeia colunas
df.drop(columns=['coluna'])	Remove coluna
df.set_index('coluna')	Define uma coluna como √≠ndice
df.reset_index()	Reseta o √≠ndice padr√£o num√©rico
df.sort_values('coluna')	Ordena os dados por uma coluna
df.astype({'coluna': tipo})	Converte o tipo de uma coluna

üéØ Filtragem e condi√ß√µes
M√©todo	O que faz
df[df['coluna'] > 100]	Filtra valores maiores que 100
df[df['coluna'] == 'valor']	Filtra onde a coluna √© igual a algo
df[(df['A'] > 10) & (df['B'] < 50)]	Filtros combinados com & e **
df.query("coluna > 100")	Filtragem usando string (mais leg√≠vel)

üìä Agrupamento e agrega√ß√µes
M√©todo	O que faz
df.groupby('coluna')	Agrupa os dados por valor de uma coluna
df.groupby('coluna').sum()	Soma por grupo
df.groupby('coluna').mean()	M√©dia por grupo
df['coluna'].value_counts()	Contagem de valores √∫nicos

üìà Gr√°ficos
M√©todo	O que faz
df.plot()	Gera um gr√°fico simples
df['coluna'].plot(kind='bar')	Gera gr√°fico de barras
df['coluna'].plot(kind='hist')	Histograma
df.plot(kind='line')	Gr√°fico de linha padr√£o


anota√ßoes oq mais aparece

importar a base de dados
df.info()   ->pra ve oq tem linhas vazias o ti0po de variavel
groupby()  agrupa por alguma coisa e faz alguma fun√ß√£o no final como .sum() .count() etc
df.loc[linhas, colunas]  (bota : se quiser todas)

kaggle site pra treinar ( nunca vou usar)